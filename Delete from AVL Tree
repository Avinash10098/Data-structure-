

#include<stdio.h>
#include<stdlib.h>


struct node
{
  int data;
  int balancefactor ;
  int Hight;
  struct node *lchild;
  struct node *rchild;
}*root = NULL;
struct node  *insert(int key)
{
  struct node *p = root;
  struct node *t , *r;
  if (root == NULL)
  {
    t = (struct node *)malloc(sizeof(struct node));
    t->data = key;
    t->balancefactor = 0;
    t->lchild = t->rchild = NULL;
    root = t;
    return NULL;
  }
  while (p)
  {
    r = p;
    if (key == p->data)
    {
      return NULL;
    }
    else if (key < p->data)
    {
      p = p->lchild;
    }
    else
    {
      p = p->rchild;
    }
  }
  t = (struct node *)malloc(sizeof(struct node));
  t->data = key;
  t->lchild = t->rchild = NULL;
  if (key < r->data)
  {
    r->lchild = t;
  }
  else
  {
    r->rchild = t;
  }
}
int hight(struct node *p)
{
  int x = 0 , y  = 0;
  if (p)
  {
    x = hight(p->lchild);
    y = hight(p->rchild);
    return x > y ? x + 1 : y + 1;
  }
}
struct node *LL(struct node *p)
{
  int lbf , rbf;
  struct node *pl = p->lchild;
  pl->balancefactor = 0;
  p->lchild = pl->rchild;
  pl->rchild = p;
  lbf = hight(p->lchild) + 1;
  rbf = hight(p->rchild) + 1;
  p->balancefactor = lbf - rbf;
  if (p == root )
  {
    root = pl;
  }
  return pl;
}
struct node *LR(struct node *p)
{
  int lbf , rbf;
  struct node *pl = p->lchild;
  struct node *plr = pl->rchild;
  plr->balancefactor = 0;
  p->lchild = plr->rchild;
  pl->rchild = plr->lchild;
  plr->lchild = pl;
  plr->rchild = p;
  lbf = hight(pl->lchild) + 1;
  rbf = hight(pl->rchild) + 1;
  pl->balancefactor = lbf - rbf;
  lbf = hight(p->lchild) + 1;
  rbf = hight(p->rchild) + 1;
  p->balancefactor = lbf - rbf;
  if (p == root)
  {
    root = plr;
  }
  return plr;
}
struct node *RR(struct node *p)
{
  int lbf , rbf;
  struct node *pr = p->rchild;
  pr->balancefactor = 0;
  p->rchild = pr->lchild;
  pr->lchild = p;
  lbf = hight(p->lchild) + 1;
  rbf = hight(p->rchild) + 1;
  p->balancefactor = lbf - rbf;
  if (p == root)
  {
    root = pr;
  }
  return pr;
}
struct node *RL(struct node *p)
{
  int lbf , rbf;
  struct node *pr = p->rchild;
  struct node *prl = pr->lchild;
  prl->balancefactor = 0;
  p->rchild = prl->lchild;
  pr->lchild = prl->rchild;
  prl->lchild = p;
  prl->rchild = pr;
  lbf = hight(pr->lchild) + 1;
  rbf = hight(pr->rchild) + 1;
  pr->balancefactor = lbf - rbf;
  lbf = hight(p->lchild) + 1;
  rbf = hight(p->rchild) + 1;
  p->balancefactor = lbf - rbf;
  if (p == root)
  {
    root = prl;
  }
  return prl;
}
struct node *rinsert(struct node *p , int key)
{
  struct node *t;
  int lbf , rbf;
  if (p == NULL)
  {
    t = (struct node *)malloc(sizeof(struct node));
    t->data = key;
    t->balancefactor = 0;
    t->lchild = t->rchild = NULL;
    return t ;
  }
  if (key < p->data)
  {
    p->lchild = rinsert(p->lchild , key);
  }
  else if (key > p->data)
  {
    p->rchild = rinsert(p->rchild , key);
  }
  lbf = hight(p->lchild) + 1;
  rbf = hight(p->rchild) + 1;
  p->balancefactor = lbf - rbf;
  if (p->balancefactor == 2 && p->lchild->balancefactor == 1)
  {
    return LL(p);
  }
  if (p->balancefactor == 2 && p->lchild->balancefactor == -1)
  {
    return LR(p);
  }
  if (p->balancefactor == -2 && p->rchild->balancefactor == 1)
  {
    return RL(p);
  }
  if (p->balancefactor == -2 && p->rchild->balancefactor == -1)
  {
    return RR(p);
  }

  return p;
}
int Balancefactor(struct node *p)
{
  int x = 0 , y = 0;
  if (p)
  {
    x = Balancefactor(p->lchild);
    y = Balancefactor(p->rchild);
    return x - y;
  }
}
struct node *inorderpredecesor(struct node *p)
{
  while (p && p->rchild)
  {
    p = p->rchild;
  }
  return p;
}
struct node *inordersuccer(struct node *p)
{
  while (p && p->lchild)
  {
    p = p->lchild;
  }
  return p;
}
struct node *Delete(struct node *p, int key)
{
  struct node *q;
  if (p == NULL)
  {
    return NULL;
  }
  if (p->lchild == NULL && p->rchild == NULL)
  {
    if (p == root)
    {
      root = NULL;
    }
    free(p);
    return NULL;
  }
  if (key < p->data)
  {
    p->lchild = Delete(p->lchild , key);
  }
  else if (key > p->data)
  {
    p->rchild = Delete(p->rchild , key);
  }
  else
  {
    if (hight(p->lchild) > hight(p->rchild))
    {
      q = inorderpredecesor(p->lchild);
      p->data = q->data;
      p->lchild = Delete(p->lchild , q->data);
    }
    else
    {
      q = inordersuccer(p->rchild);
      p->data = q->data;
      p->rchild = Delete(p->rchild , q->data);
    }
    p->Hight = hight(p);
    if (Balancefactor(p) == 2 && Balancefactor(p->lchild) == 1)
    {
      return LL(p);
    }
    if (Balancefactor(p) == 2 && Balancefactor(p->lchild) == -1)
    {
      return LR(p);
    }
    if (Balancefactor(p) == 2 && Balancefactor(p->lchild) == 0)
    {
      return LL(p);
    }
    if (Balancefactor(p) == -2 && Balancefactor(p->rchild) == -1)
    {
      return RR(p);
    }
    if (Balancefactor(p) == -2 && Balancefactor(p->rchild) == 1)
    {
      return RL(p);
    }
    if (Balancefactor(p) == -2 && Balancefactor(p->rchild) == 0)
    {
      return RR(p);
    }
  }
}
int inorder(struct node *p)
{
  if (p)
  {
    inorder(p->lchild);
    printf("%d ", p->data);
    inorder(p->rchild);
  }
}
int main()
{
  root = rinsert(root, 50);
  insert(10);
  insert(20);
  insert(5);
  Delete(root, 5);
  inorder(root);
}
