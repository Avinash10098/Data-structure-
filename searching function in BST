#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct node
{
    int data;
    struct node *lchild;
    struct node *rchild;
}*root = NULL;
struct node *insert(int key)
{
    struct node *p = root;
    struct node *t, *r;
    if (root == NULL)
    {
        t = (struct node*)malloc(sizeof(struct node));
        t->data = key;
        t->lchild = t->rchild = NULL;
        root = t;
        return NULL;
    }
    while (p)
    {
        r = p;
        if (key == p->data)
        {
            return NULL;
        }
        else if (key < p->data)
        {
            p = p->lchild;
        }
        else
        {
            p = p->rchild;
        }
    }
    t = (struct node*)malloc(sizeof(struct node));
    t->data = key;
    t->lchild = t->rchild = NULL;
    if (key < r->data)
    {
        r->lchild = t;
    }
    else
    {
        r->rchild = t;
    }
}
struct node *rinosert(struct node *p, int key)
{
    struct node *t;
    if (p == NULL)
    {
        t = (struct node*)malloc(sizeof(struct node));
        t->data = key;
        t->lchild = t->rchild = NULL;
        return t;
    }
    if (key < p->data)
    {
        p->lchild = rinosert(p->lchild , key);
    }
    else if (key > p->data)
    {
        p->rchild = rinosert(p->rchild , key);
    }
    return p;
}
int hight(struct node *p)
{
    int x , y;
    if (p)
    {
        x = hight(p->lchild);
        y = hight(p->rchild);
        return x > y ? x + 1 : y + 1;
    }
}
struct node *inorderpredesesor(struct node *p)
{
    while (p && p->rchild)
    {
        p = p->rchild;
    }
    return p;
}
struct node *inordersuccer(struct node *p)
{
    while (p && p->lchild)
    {
        p = p->lchild;
    }
    return p;
}
struct node *Delete(struct node *p , int key)
{
    struct node *q;
    if (p == NULL)
    {
        return NULL;
    }
    if (p->lchild == NULL && p->rchild == NULL)
    {
        if (p == root)
        {
            root = NULL;
        }
        free(p);
        return NULL;
    }
    if (key < p->data)
    {
        p->lchild = Delete(p->lchild , key);
    }
    else if (key > p->data)
    {
        p->rchild = Delete(p->rchild , key);
    }
    else
    {
        if (hight(p->lchild) > hight(p->rchild))
        {
            q = inorderpredesesor(p->lchild);
            p->data = q->data;
            p->lchild = Delete(p->lchild, q->data);
        }
        else
        {
            q = inordersuccer(p->rchild);
            p->data = q->data;
            p->rchild = Delete(p->rchild, q->data);
        }
    }
    return p;
}
struct node *search(struct node *p, int key)
{
    while (p)
    {
        if (key == p->data)
        {
            return p;
        }
        else if (key < p->data)
        {
            p = p->lchild;
        }
        else
        {
            p = p->rchild;
        }
    }
    return NULL;
}
struct node *Rsearch(struct node *p ,int key)
{
    if(p)
    {
        if(key == p->data)
        {
            return p;
        }
        else if(key < p->data)
        {
            return Rsearch(p->lchild , key);
        }
        else
        {
            return Rsearch(p->rchild , key);
        }
    }
    return 0;
}
int inorder(struct node*p)
{
    if (p)
    {
        inorder(p->lchild);
        printf("%d ", p->data);
        inorder(p->rchild);
    }
}
int main()
{
    struct node *p;
    root = rinosert(root, 45);
    insert(10);
    insert(20);
    insert(5);
    insert(2);
    insert(8);
    p = Rsearch(root, 8);
    printf("%d\n", p->data);
    inorder(root);

}
