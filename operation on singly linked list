#include <bits/stdc++.h>
struct node
{
  int data;
  struct node *next;
}*first = NULL, *second = NULL , *third = NULL;
void create(int a[] , int n)
{
  struct node *last, *t;
  first = (struct node*)malloc(sizeof(struct node));
  first->data = a[0];
  first->next = NULL;
  last = first;
  for (int i = 1 ; i < n ; i++)
  {
    t = (struct node*)malloc(sizeof(struct node));
    t->data = a[i];
    t->next = NULL;
    last->next = t;
    last =  t;
  }
}
struct node *search(struct node *p , int key)
{
  while (p)
  {
    if (key == p->data)
    {
      return p;
    }
    p = p->next;
  }
  return 0;
}
int sum(struct node *p)
{
  int sum = 0;
  while (p)
  {
    sum = sum + p->data;
    p = p->next;
  }
  return sum;
}
int Rsum(struct node *p)
{
  if (p)
  {
    return Rsum(p->next) + p->data;
  }
}
int count(struct node *p)
{
  int c = 0;
  while (p)
  {
    c++;
    p = p->next;
  }
  return c;
}
int insert(struct node *p , int pos , int key)
{
  struct node *t;
  if (pos < 0 || pos > count(p))
  {
    return 0;
  }
  t = (struct node*)malloc(sizeof(struct node));
  t->data  = key;
  t->next = NULL;
  if (pos == 0)
  {
    t->next = first;
    first = t;
  }
  else
  {
    for (int i = 0 ; i < pos - 1 ; i++)
    {
      p = p->next;
    }
    t->next = p->next;
    p->next = t;
  }
}
int insert_sort(struct node *p , int key)
{
  struct node *t , *q = NULL;
  t = (struct node*)malloc(sizeof(struct node));
  t->data = key;
  t->next = NULL;
  if (p == NULL)
  {
    first = t;
  }
  else
  {
    while (p && key > p->data)
    {
      q = p;
      p = p->next;
    }
    if (first == p)
    {
      t->next = first;
      first  = t;
    }
    else
    {
      t->next = q->next;
      q->next = t;

    }
  }
}
int  Delete(struct node *p , int pos)
{
  struct node *q = NULL;
  if (pos < 0 || pos > count(p))
  {
    return 0;
  }
  else
  {
    if (pos == 1)
    {
      p = first;
      first = first->next;
      free(p);
    }
    else
    {
      for (int i = 0 ; i < pos - 1 ; i++)
      {
        q = p;
        p = p->next;
      }
      q->next = p->next;
      free(p);
    }
  }
}
int Reverse(struct node *p)
{
  struct node *q = NULL, *r = NULL;
  while (p)
  {
    r = q;
    q = p;
    p = p->next;
    q->next = r;
  }
  first = q;
}

void create1(int a[] , int n)
{
  struct node *last, *t;
  first = (struct node*)malloc(sizeof(struct node));
  first->data = a[0];
  first->next = NULL;
  last = first;
  for (int i = 1 ; i < n ; i++)
  {
    t = (struct node*)malloc(sizeof(struct node));
    t->data = a[i];
    t->next = NULL;
    last->next = t;
    last =  t;
  }
}
void create2(int a[] , int n)
{
  struct node *last, *t;
  second = (struct node*)malloc(sizeof(struct node));
  second->data = a[0];
  second->next = NULL;
  last = second;
  for (int i = 1 ; i < n ; i++)
  {
    t = (struct node*)malloc(sizeof(struct node));
    t->data = a[i];
    t->next = NULL;
    last->next = t;
    last =  t;
  }
}
void concan(struct node *p , struct node *q)
{
  third = p;
  while (p->next)
  {
    p = p->next;
  }
  p->next = second;
}
void merge(struct node *p , struct node *q)
{
  struct node *last = NULL;
  if (p->data < q->data)
  {
    third = last = p;
    p = p->next;
    last->next = NULL;
  }
  else
  {
    third = last = q;
    q = q->next;
    last->next = NULL;
  }
  while (p && q)
  {
    if (p->data < q->data)
    {
      last->next = p;
      last = p;
      p  = p->next;
      last->next = NULL;
    }
    else
    {
      last->next = q;
      last = q;
      q = q->next;
      last->next = NULL;
    }
  }
  if (p)
  {
    last->next = p;
  }
  if (q)
  {
    last->next = q;
  }
}
void display(struct node *p)
{
  while (p)
  {
    printf("%d ", p->data);
    p = p->next;
  }
}
int main()
{
  struct node *p;
  int a[] = {1, 3, 5, 7, 9};
  int n = 5;
  create(a, 5);
  Reverse(first);
  display(first);
}
