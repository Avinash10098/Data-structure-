#include <bits/stdc++.h>
void swap(int *x , int *y)
{
  int temp;
  temp = *x;
  *x = *y;
  *y = temp;
}
int bubble_sort(int a[] , int n)
{
  int i , j;
  for (i = 0 ; i < n - 1 ; i++)
  {
    for (j = 0 ; j < n - 1 - i ; j++)
    {
      if (a[j] > a[j + 1])
      {
        swap(&a[j] , &a[j + 1]);
      }
    }
  }
}
int insert_sort(int a[] , int n)
{
  int i , j , x;
  for (i = 1 ; i < n ; i++)
  {
    j = i - 1;
    x = a[i];
    while (j > -1  && a[j] > x)
    {
      a[j + 1] = a[j];
      j--;
    }
    a[j + 1] = x;
  }
}
void selection_sort(int a[] , int n)
{
  int i , j , k;
  for (i = 0 ; i < n - 1 ; i++)
  {
    for (j = k = i ; j < n ; j++)
    {
      if (a[j] < a[k])
      {
        k = j;
      }
    }
    swap(&a[i] , &a[k]);
  }
}
int pratition(int a[] , int l , int h)
{
  int pivot = a[l];
  int i = l ;
  int j = h;
  do
  {
    do {
      i++;
    } while (a[i] <= pivot);
    do
    {
      j--;
    } while (a[j] > pivot);
    if (i < j)
    {
      swap(&a[i] , &a[j]);
    }
  } while (i < j);
  swap(&a[l] , &a[j]);
  return j;
}
void quicksort(int a[] , int l , int h)
{
  if (l < h)
  {
    int pi = pratition(a, l, h);
    quicksort(a, l, pi);
    quicksort(a, pi + 1, h);
  }
}
void merge(int a[] , int l , int h , int mid)
{
  int i = l , j = mid + 1 , k = l;
  int b[100];
  while (i <= mid && j  <= h)
  {
    if (a[i] < a[j])
    {
      b[k++] = a[i++];
    }
    else
    {
      b[k++] = a[j++];
    }
  }
  for ( ; i <= mid ; i++)
  {
    b[k++] = a[i];
  }
  for ( ; j <= h ; j++)
  {
    b[k++] = a[j];
  }
  for (i = l ; i <= h ; i++)
  {
    a[i] = b[i];
  }
}
int merge_sort(int a[] , int l , int h)
{
  int mid;
  if (l < h)
  {
    mid = (l + h) / 2;
    merge_sort(a, l, mid);
    merge_sort(a, mid + 1, h);
    merge(a, l, h, mid);
  }
}
int main()
{
  int a[] = {1, 7, 7, 3, 4};
  merge_sort(a, 0, 5);
  for (int i = 0 ; i < 5 ; i++)
  {
    printf("%d ", a[i]);
  }
}
